import java.util.LinkedList;

class A{

    int num;

    A(int num){

        this.num = num;

    }
}

public class Test {

    // 클래스 다이어그램 접근 제어자!
    // 객체를 생성할 때 생성자 어떻게 지정하는지 확인
    // 함수를 똑같은 이름으로 여러개 만들 수 있는데 이걸 뭐라하는지 > 오버로딩
    // 부모한테 상속받은 함수의 내용만 변경하는 거  > 오버라이딩

    // 문자열에서 문자를 구분하는 것, 치환하는 것, 비교하는 문자열을 자르는 메서드가 있다.

    public static void main(String[] args) {

        A[] list = new A[5];
        // 다음과 같은 배열이 있을떄 객체 생성하는 방법, 안에있는 내용을 출력하는 방법, 이때 배열안의 객체들의 접근제어자가
        // private인 경우 public인 경우, default인 경우 어떻게 접근하는지

        // LinkedList 사용법?
        // ArrayList 사용법
        // 그리고 이 두 리스트컬렉션의 차이점이 무엇인지.
        // 그리고 이 리스트의 내용을 출력하기 위해서는 어떻게 해야하는지?

        // 입출력에 관한 내용
        // 문자를 저장을 할때 사용하는 클래스
        // 이진파일을 저장하거나 읽어오는 클래스가 있었다
        // 읽어올떄 쓸떄 모드? 그리고 파일 작성 경로?

        // 네트워크
        // 가장 중요한 것. 소켓의 동작원리? 클라이언트와 서버에 어떻게 들어가는지?
        // 통신시 누굴 먼저 실행해야하느냐 (서버먼저)
        // 클라이언ㅌ트랑 서버랑 소캣을 이용해 통신해서 데이터를 꺼내는데 이때 어떻게 꺼내는지

        // 어떤 문제나 프로그램 설계를 할때 클래스의 정의란? -> 이게 뭔소리야?
        // 1. 접근제어자
        // 2. 데이터(변수) 멤버변수(필드) 수
        // 3. 기능(메서드) 멤버메서드 수
        // 4. getter, setter

    }
}
