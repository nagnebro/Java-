public class Instance_Static_Var {
    public static void main(String[] args) {
        FishBread [] f_list = new FishBread[3]; // 여기서 이 붕어빵 객체를 저장한 객체배열을 어디에 선언하느냐에 따라 프로그램이 달라진다
        // 정확히 말하면 이 프로그램에서는 객체배열을 출력하는 부분을 메인메서드에 넣었기 때문에 메인메서드에 리스트를 두는게 더 낫긴하다.
        // 하지만 그 출력하는 부분을 메서드화 시켜 인스턴스 메서드에서 사용해야하는 상황을 가정하고 얘기해보는 것이다.
        // 항상 극단적으로 생각하면 FishBread 타입의 객체배열이 한개만 있지 않고 두개 세개 있을 경우도 있기 떄문이다.

        // 만약 붕어빵 객체내에 선언하게 된다면 그 배열에 접근하기 위한 공통적인 참조변수를 하나 선언해야하지만 FishBread배열을 출력할 때 쓰는
        // printFish 메서드를 쓸때는 매개변수 없이도 본인의 배열을 쓰기 때문에 간단하다. 다만 메인메서드에서는 배열에 접근할때 계속 공통적인 참조변수를
        // 통해 접근해야한다.
        // 1. 메인 메서드에 객체배열을 선언할 경우 > 인스턴스 메서드에서 매개변수로 배열에 접근해야할 경우가 많은지
        // 2. 인스턴스 메서드에 객체배열을 선언할 경우 > 메인메서드에서 참조변수로 배열에 접근해야 할 경우가 많은지
        // 고려해보고 결정해야 한다.
        // 그리고 공통적인 배열을 사용할 것이냐 인스턴스별로 다른 값을 가지는 배열을 사용할 것인가에 대해서도 판단기준이 조금 달라질 수 있다.
        // 예를 들어 앞전에 실습했던 기차와 지역에 따른 요금표 배열 같은 경우에는 모두가 같은 값을 공유해야한다.
        // 그러나 이번 붕어빵 같은 경우 각각의 사람이 모두 다른 종류의 붕어빵을 가질 수도 있다.
        // 그럼에도 불구하고 이 두가지 경우도 모두 인스턴스 메서드에 배열을 선언하는 것이 맞다고 본다. 그냥 메인메서드에 쓰는 문장을
        // 인스턴스 메서드화 시켜버리면 되기 떄문이다. 그래도 인스턴스메서에서 그 배열이 이용되는 경우보다 메인메서드에서 접근할 일이 더많으면
        // 그냥 메인에 선언하는게 나은 것 같다. 너무 복잡하게 정리했네 내용을..
        f_list[0] = new FishBread("팥");
        f_list[1] = new FishBread("슈크림");
        f_list[2] = new FishBread("피자");


        for( FishBread f : f_list){
            f.printFish();
        }
        System.out.println("============");
        System.out.println("붕어빵 객체 수 : "+FishBread.count);
    }
}

class FishBread{
    String contents; // 내용물
    static int count = 0;

    void printFish(){
        System.out.printf("[%s] 붕어빵\n",contents);
    }
    public FishBread(String contents) {
        this.contents = contents;
        FishBread.count++; // 스태틱변수임을 확실하게 하기 위해 앞에 클래스 명을 붙여줌.
    }
}